name: "Terraform checks"
on:
  push:
    branches:
      - main
  pull_request:
    paths-ignore:
      - "modules/*/lambdas/**"

permissions:
  contents: read
  pull-requests: write

env:
  AWS_REGION: eu-west-1
jobs:
  verify_module:
    name: Verify module
    strategy:
      matrix:
        terraform: [1.3.2, "latest"]
    runs-on: ubuntu-latest
    container:
      image: hashicorp/terraform:${{ matrix.terraform }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3
      - name: "Fake zip files" # Validate will fail if it cannot find the zip files
        run: |
          touch lambdas/functions/webhook/webhook.zip
          touch lambdas/functions/control-plane/runners.zip
          touch lambdas/functions/gh-agent-syncer/runner-binaries-syncer.zip
      - name: terraform init
        run: terraform init -get -backend=false -input=false
      - if: contains(matrix.terraform, '1.3.')
        name: check terraform formatting
        run: terraform fmt -recursive -check=true -write=false
      - if: contains(matrix.terraform, 'latest') # check formatting for the latest release but avoid failing the build
        name: check terraform formatting
        run: terraform fmt -recursive -check=true -write=false
        continue-on-error: true
      - name: validate terraform
        run: terraform validate
      - if: contains(matrix.terraform, '1.3.')
        name: Setup TFLint
        uses: terraform-linters/setup-tflint@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - if: contains(matrix.terraform, '1.3.')
        name: Run TFLint
        run: tflint -f compact

  verify_examples:
    name: Verify examples
    strategy:
      fail-fast: false
      matrix:
        terraform: [1.3.0, "latest"]
        example:
          ["default", "ubuntu", "prebuilt", "arm64", "ephemeral", "windows"]
    defaults:
      run:
        working-directory: examples/${{ matrix.example }}
    runs-on: ubuntu-latest
    container:
      image: hashicorp/terraform:${{ matrix.terraform }}
    steps:
      - uses: actions/checkout@v3
      - name: terraform init
        run: terraform init -get -backend=false -input=false
      - if: contains(matrix.terraform, '1.3.')
        name: check terraform formatting
        run: terraform fmt -recursive -check=true -write=false
      - if: contains(matrix.terraform, 'latest') # check formatting for the latest release but avoid failing the build
        name: check terraform formatting
        run: terraform fmt -recursive -check=true -write=false
        continue-on-error: true
      - name: validate terraform011
        run: terraform validate


  verify_multi_runner_example:
    name: Verify Multi-Runner examples
    strategy:
      fail-fast: false
      matrix:
        terraform: [1.3.2, "latest"]
    defaults:
      run:
        working-directory: examples/multi-runner
    runs-on: ubuntu-latest
    container:
      image: hashicorp/terraform:${{ matrix.terraform }}
    steps:
      - uses: actions/checkout@v3
      - name: terraform init
        run: terraform init -get -backend=false -input=false
      - if: contains(matrix.terraform, '1.3.')
        name: check terraform formatting
        run: terraform fmt -recursive -check=true -write=false
      - if: contains(matrix.terraform, 'latest') # check formatting for the latest release but avoid failing the build
        name: check terraform formatting
        run: terraform fmt -recursive -check=true -write=false
        continue-on-error: true
      - name: validate terraform
        run: terraform validate

